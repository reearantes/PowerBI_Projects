# -*- coding: utf-8 -*-
"""Projeto_Financeiro_ETL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPBMSEN97TexSnsYfSdPaG9xaPmLp77F

# Carregando os dados de Cadastro Plano Contas
"""

import pandas as pd
from google.colab import drive

# Caminho do arquivo Excel
caminho_arquivo = '/content/CadastroPlanoContas.xlsx'

# Nome da planilha que você quer carregar
nome_planilha = 'Contas'

# Carregar o arquivo Excel
try:
    df_cadastro = pd.read_excel(caminho_arquivo, sheet_name=nome_planilha)
    print("Arquivo carregado com sucesso!")
except Exception as e:
    print(f"Erro ao carregar o arquivo: {e}")
    df_cadastro = None  # Define df_cadastro como None para evitar erros

# Se o arquivo foi carregado com sucesso, continue
if df_cadastro is not None:
    # Mostrar as primeiras 5 linhas do DataFrame
    print("\nPrimeiras 5 linhas do DataFrame:")
    print(df_cadastro.head())

    # Verificar informações básicas do DataFrame
    print("\nInformações do DataFrame:")
    print(df_cadastro.info())

    # Verificar se há valores nulos
    print("\nValores nulos por coluna:")
    print(df_cadastro.isnull().sum())

    # Salvar como Parquet
    try:
        df_cadastro.to_parquet('dados_tratados.parquet', index=False)
        print("\nDataFrame salvo como Parquet: 'dados_tratados.parquet'")
    except Exception as e:
        print(f"\nErro ao salvar como Parquet: {e}")

    # Salvar no Google Drive
    try:
        # Montar o Google Drive
        drive.mount('/content/drive')

        # Caminho no Google Drive para salvar o arquivo
        caminho_drive = '/content/drive/MyDrive/dados_tratados.parquet'

        # Salvar o arquivo Parquet no Google Drive
        df_cadastro.to_parquet(caminho_drive, index=False)
        print(f"\nDataFrame salvo no Google Drive: {caminho_drive}")
    except Exception as e:
        print(f"\nErro ao salvar no Google Drive: {e}")
else:
    print("\nNão foi possível carregar o DataFrame.")

"""# Carregado dados de Pagamento e Realizando o agrupamento"""

import pandas as pd
import os
from google.colab import drive

# Montar o Google Drive (se necessário)
drive.mount('/content/drive')

# Listar todos os arquivos no diretório /content/
arquivos = os.listdir('/content/')

# Filtrar apenas os arquivos que correspondem ao padrão "Pagamentos XXXX.xlsx"
arquivos_pagamentos = [arquivo for arquivo in arquivos if arquivo.startswith('Pagamentos') and arquivo.endswith('.xlsx')]

# Lista para armazenar os DataFrames transformados
dfs_transformados = []

# Dicionário para mapear meses abreviados para números
meses_abreviados = {
    'jan': '01', 'fev': '02', 'mar': '03', 'abr': '04', 'mai': '05', 'jun': '06',
    'jul': '07', 'ago': '08', 'set': '09', 'out': '10', 'nov': '11', 'dez': '12'
}

# Loop para carregar e transformar cada arquivo
for arquivo in arquivos_pagamentos:
    try:
        # Caminho completo do arquivo
        caminho_arquivo = f'/content/{arquivo}'

        # Carregar o arquivo Excel, começando da segunda linha (header=1)
        df = pd.read_excel(caminho_arquivo, header=1)
        print(f"Arquivo {arquivo} carregado com sucesso!")

        # Remover a primeira coluna (coluna em branco)
        df = df.drop(df.columns[0], axis=1)

        # Renomear a primeira coluna para "ID Conta"
        df.columns = ['ID Conta'] + df.columns[1:].tolist()

        # Extrair o ano do nome do arquivo
        ano = arquivo.split(' ')[1].split('.')[0]  # Extrai o ano do nome do arquivo

        # Identificar automaticamente as colunas de meses
        # As colunas de meses são aquelas que não são "ID Conta"
        colunas_meses = [coluna for coluna in df.columns if coluna != 'ID Conta']

        # Transformar os dados: "derreter" as colunas de meses em linhas
        df_transformado = pd.melt(
            df,
            id_vars=['ID Conta'],  # Coluna que será mantida como identificador
            value_vars=colunas_meses,  # Colunas de meses identificadas automaticamente
            var_name='Mês',  # Nome da nova coluna para os meses
            value_name='Valor'  # Nome da nova coluna para os valores
        )

        # Padronizar a coluna "Mês"
        def padronizar_mes(mes):
            try:
                if isinstance(mes, str):  # Se for uma string no formato "MMM/aa"
                    if '/' in mes:  # Verifica se a string contém o caractere '/'
                        mes_abreviado, ano_abreviado = mes.split('/')
                        mes_numero = meses_abreviados[mes_abreviado.lower()]
                        return f"01/{mes_numero}/20{ano_abreviado}"  # Formato dd/MM/yyyy
                    else:
                        return None  # Retorna None para valores inesperados
                else:  # Se for uma data (datetime)
                    return mes.strftime('%d/%m/%Y')  # Formato dd/MM/yyyy
            except Exception as e:
                print(f"Erro ao padronizar o valor '{mes}': {e}")
                return None  # Retorna None em caso de erro

        # Aplicar a função de padronização
        df_transformado['Mês'] = df_transformado['Mês'].apply(padronizar_mes)

        # Remover linhas com valores nulos na coluna "Mês"
        df_transformado = df_transformado.dropna(subset=['Mês'])

        # Adicionar uma coluna com o ano
        df_transformado['Ano'] = int(ano)

        # Adicionar o DataFrame transformado à lista
        dfs_transformados.append(df_transformado)
    except Exception as e:
        print(f"Erro ao carregar ou transformar o arquivo {arquivo}: {e}")

# Concatenar todos os DataFrames transformados em um único DataFrame
if dfs_transformados:
    df_final = pd.concat(dfs_transformados, ignore_index=True)
    print("\nDataFrames transformados e agregados com sucesso!")

    # Mostrar as primeiras 5 linhas do DataFrame final
    print("\nPrimeiras 5 linhas do DataFrame final:")
    print(df_final.head())

    # Verificar informações básicas do DataFrame final
    print("\nInformações do DataFrame final:")
    print(df_final.info())

    # Verificar se há valores nulos
    print("\nValores nulos por coluna:")
    print(df_final.isnull().sum())

    # Salvar como Parquet
    try:
        # Verificar tipos de dados antes de salvar
        print("\nTipos de dados das colunas:")
        print(df_final.dtypes)

        # Salvar como Parquet
        df_final.to_parquet('pagamentos_transformados.parquet', index=False)
        print("\nDataFrame final salvo como Parquet: 'pagamentos_transformados.parquet'")
    except Exception as e:
        print(f"\nErro ao salvar como Parquet: {e}")

    # Salvar no Google Drive
    try:
        # Caminho no Google Drive para salvar o arquivo
        caminho_drive = '/content/drive/MyDrive/pagamentos_transformados.parquet'

        # Salvar o arquivo Parquet no Google Drive
        df_final.to_parquet(caminho_drive, index=False)
        print(f"\nDataFrame final salvo no Google Drive: {caminho_drive}")
    except Exception as e:
        print(f"\nErro ao salvar no Google Drive: {e}")
else:
    print("\nNenhum arquivo foi carregado ou transformado.")

"""# Carregando dados de Recebimentos"""

import pandas as pd
import os
from google.colab import drive

# Montar o Google Drive (se necessário)
drive.mount('/content/drive')

# Listar todos os arquivos no diretório raiz
arquivos = os.listdir('/')

# Filtrar apenas os arquivos que correspondem ao padrão "Recebimentos - XXXX.xlsx"
arquivos_recebimentos = [arquivo for arquivo in arquivos if 'Recebimentos' in arquivo and arquivo.endswith('.xlsx')]

# Lista para armazenar os DataFrames transformados
dfs_transformados = []

# Loop para carregar e transformar cada arquivo
for arquivo in arquivos_recebimentos:
    try:
        # Caminho completo do arquivo (no diretório raiz)
        caminho_arquivo = f'/{arquivo}'

        # Carregar o arquivo Excel
        df = pd.read_excel(caminho_arquivo)
        print(f"Arquivo {arquivo} carregado com sucesso!")

        # Extrair o ano do nome do arquivo
        # Exemplo: "01 - Recebimentos - 2017.xlsx" -> ano = 2017
        ano = arquivo.split('-')[-1].split('.')[0].strip()  # Extrai o ano do nome do arquivo
        df['Ano'] = int(ano)  # Adiciona uma coluna 'Ano' ao DataFrame

        # Adicionar o DataFrame à lista
        dfs_transformados.append(df)
    except Exception as e:
        print(f"Erro ao carregar ou transformar o arquivo {arquivo}: {e}")

# Concatenar todos os DataFrames transformados em um único DataFrame
if dfs_transformados:
    df_final = pd.concat(dfs_transformados, ignore_index=True)
    print("\nDataFrames transformados e agregados com sucesso!")

    # Mostrar as primeiras 5 linhas do DataFrame final
    print("\nPrimeiras 5 linhas do DataFrame final:")
    print(df_final.head())

    # Verificar informações básicas do DataFrame final
    print("\nInformações do DataFrame final:")
    print(df_final.info())

    # Verificar se há valores nulos
    print("\nValores nulos por coluna:")
    print(df_final.isnull().sum())

    # Salvar como Parquet
    try:
        # Verificar tipos de dados antes de salvar
        print("\nTipos de dados das colunas:")
        print(df_final.dtypes)

        # Salvar como Parquet
        df_final.to_parquet('recebimentos_agregados.parquet', index=False)
        print("\nDataFrame final salvo como Parquet: 'recebimentos_agregados.parquet'")
    except Exception as e:
        print(f"\nErro ao salvar como Parquet: {e}")

    # Salvar no Google Drive
    try:
        # Caminho no Google Drive para salvar o arquivo
        caminho_drive = '/content/drive/MyDrive/recebimentos_agregados.parquet'

        # Salvar o arquivo Parquet no Google Drive
        df_final.to_parquet(caminho_drive, index=False)
        print(f"\nDataFrame final salvo no Google Drive: {caminho_drive}")
    except Exception as e:
        print(f"\nErro ao salvar no Google Drive: {e}")
else:
    print("\nNenhum arquivo foi carregado ou transformado.")